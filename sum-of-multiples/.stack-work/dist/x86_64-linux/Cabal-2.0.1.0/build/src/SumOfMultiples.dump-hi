
==================== FINAL INTERFACE ====================
2018-06-14 17:23:05.540931 UTC

interface sum-of-multiples-1.2.0.5-IZxbyblmMbIFdM2i99EHXB:SumOfMultiples 8022
  interface hash: 7ac17862416c12116419d96dd8f60848
  ABI hash: 7d2ad3db0847958083def1ff0ca1548a
  export-list hash: 07d6cfdf22e78526ed03d035640c1584
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d3f9096bac2e1e79f6ff76d0840aa157
  sig of: Nothing
  used TH splices: False
  where
exports:
  SumOfMultiples.sumOfMultiples
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Enum 5a1ba50c23f92f669e01f8955f202337
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
5b63119bba2ff565ddbdc2992bf17210
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SumOfMultiples.$trModule3
                   SumOfMultiples.$trModule1) -}
706f3d6039aab79fec9dc27c04915787
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SumOfMultiples.$trModule2) -}
f618040728c96b5c9c07527ce12bd1fe
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SumOfMultiples"#) -}
e850a395aedc844358f4ed5c33ef920a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SumOfMultiples.$trModule4) -}
002be40f44a0005d52fb27e0195d8bca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("sum-of-multiples-1.2.0.5-IZxbyblmMbIFdM2i99EHXB"#) -}
525587ffbc333c7d6300806464aa5dc0
  sumOfMultiples ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (x :: [GHC.Integer.Type.Integer])
                   (y :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger y GHC.Enum.$fEnumInteger1
                 } in
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [GHC.Integer.Type.Integer]) ->
                     case ds1 of wild {
                       [] -> GHC.Types.[] @ GHC.Integer.Type.Integer
                       : y1 ys
                       -> case GHC.Integer.Type.eqInteger#
                                 y1
                                 SumOfMultiples.sumOfMultiples2 of wild1 { DEFAULT ->
                          case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                            GHC.Types.False
                            -> let {
                                 lim :: GHC.Integer.Type.Integer
                                 = GHC.Integer.Type.quotInteger ds y1
                               } in
                               letrec {
                                 go1 :: GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
                                   {- Arity: 1, Strictness: <S,U> -}
                                 = \ (x1 :: GHC.Integer.Type.Integer) ->
                                   case GHC.Integer.Type.gtInteger# x1 lim of wild3 { DEFAULT ->
                                   case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 of wild4 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Integer.Type.Integer
                                          (GHC.Integer.Type.timesInteger x1 y1)
                                          (go1
                                             (GHC.Integer.Type.plusInteger
                                                x1
                                                SumOfMultiples.sumOfMultiples1))
                                     GHC.Types.True -> GHC.Types.[] @ GHC.Integer.Type.Integer } }
                               } in
                               GHC.Base.++
                                 @ GHC.Integer.Type.Integer
                                 (go1 SumOfMultiples.sumOfMultiples1)
                                 (go ys)
                            GHC.Types.True
                            -> case GHC.Real.divZeroError
                               ret_ty [GHC.Integer.Type.Integer]
                               of {} } } }
                 } in
                 SumOfMultiples.sumOfMultiples_go
                   (Data.OldList.nubBy
                      @ GHC.Integer.Type.Integer
                      GHC.Integer.Type.eqInteger
                      (go x))
                   SumOfMultiples.sumOfMultiples2) -}
b1177d8dafd56b6c3fc70d11106573a3
  sumOfMultiples1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2459b4045a8c0c68c355d323dbc101df
  sumOfMultiples2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
4c673820b0e7481cf7170eab46a3870e
  sumOfMultiples_go ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

